[
  {
    "ID": "23f41c87-e579-4d9a-88d4-ecf7227847a6",
    "Title": "sleepIn",
    "Question": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.",
    "Examples": "",
    "FunctionSig": "bool sleepIn(bool weekday, bool vacation)",
    "Difficulty": "Easy"
  },
  {
    "ID": "c4b51339-1898-498c-b0e2-b8ee4ecb51f5",
    "Title": "sumDouble",
    "Question": "We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.Given two int values, return their sum. Unless the two values are the same, then return double their sum.",
    "Examples": "monkeyTrouble(true, true) → truemonkeyTrouble(false, false) → truemonkeyTrouble(true, false) → falsesumDouble(1, 2) → 3\tsumDouble(3, 2) → 5\tsumDouble(2, 2) → 8\tsumDouble(-1, 0) → -1sumDouble(3, 3) → 12sumDouble(0, 0) → 0\tsumDouble(0, 1) → 1\tsumDouble(3, 4) → 7",
    "FunctionSig": "int sumDouble(int a, int b)",
    "Difficulty": "Easy"
  },
  {
    "ID": "8e1cb576-f265-40ae-a61a-2f34f40b6b5e",
    "Title": "makes10",
    "Question": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23.We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.",
    "Examples": "diff21(19) → 2\tdiff21(10) → 11\tdiff21(21) → 0\tdiff21(22) → 2\tdiff21(25) → 8\tdiff21(30) → 18\tdiff21(0) → 21\tdiff21(1) → 20\tdiff21(2) → 19\tdiff21(-1) → 22\tdiff21(-2) → 23\tdiff21(50) → 58\tparrotTrouble(true, 6) → true\tparrotTrouble(true, 7) → false\tparrotTrouble(false, 6) → false\tparrotTrouble(true, 21) → true\tparrotTrouble(false, 21) → falseparrotTrouble(false, 20) → falseparrotTrouble(true, 23) → true\tparrotTrouble(false, 23) → falseparrotTrouble(true, 20) → false\tparrotTrouble(false, 12) → falsemakes10(9, 10) → true\tmakes10(9, 9) → false\tmakes10(1, 9) → true\tmakes10(10, 1) → true\tmakes10(10, 10) → true\tmakes10(8, 2) → true\tmakes10(8, 3) → false\tmakes10(10, 42) → true\tmakes10(12, -2) → true",
    "FunctionSig": "bool makes10(int a, int b)",
    "Difficulty": "Easy"
  },
  {
    "ID": "ec9a47b3-ff99-414f-bfd2-2cf64c9e743c",
    "Title": "frontBack",
    "Question": "Given an int n, return true if it is within 10 of 100 or 200. Note: std::abs(num) computes the absolute value of a number.Given 2 int values, return true if one is negative and one is positive. Except if the parameter \"negative\" is true, then return true only if both are negative.Given a string, return a new string where \"not \" has been added to the front.However, if the string already begins with \"not\", return the string unchanged. Note: use == to compare 2 strings.use .substr(startIndex, length) to get part of a string,std::string hello = \"Hello\";hello.substr(0,3); // returns \"Hel\"Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string i.e. n will be in the range 0..str.length()-1 inclusive).substr(n) will go from n to the end of the stringGiven a string, return a new string where the first and last chars have been exchanged.",
    "Examples": "nearHundred(93) → true\tnearHundred(90) → true\tnearHundred(89) → false\tnearHundred(110) → true\tnearHundred(111) → false\tnearHundred(121) → false\tnearHundred(-101) → false\tnearHundred(-209) → false\tnearHundred(190) → true\tnearHundred(209) → true\tnearHundred(0) → false\tnearHundred(5) → false\tnearHundred(-50) → falsenearHundred(191) → true\tnearHundred(189) → falsenearHundred(200) → true\tnearHundred(210) → true\tnearHundred(211) → falsenearHundred(290) → falseposNeg(1, -1, false) → true\tposNeg(-1, 1, false) → true\tposNeg(-4, -5, true) → true\tposNeg(-4, -5, false) → false\tposNeg(-4, 5, false) → true\tposNeg(-4, 5, true) → false\tposNeg(1, 1, false) → false\tposNeg(-1, -1, false) → false\tposNeg(1, -1, true) → false\tposNeg(-1, 1, true) → false\tposNeg(1, 1, true) → false\tposNeg(-1, -1, true) → true\tposNeg(5, -5, false) → true\tposNeg(-6, 6, false) → true\tposNeg(-5, -6, false) → false\tposNeg(-2, -1, false) → false\tposNeg(1, 2, false) → falseposNeg(-5, 6, true) → falseposNeg(-5, -5, true) → truenotString(\"candy\") → \"not candy\"\tnotString(\"x\") → \"not x\"\tnotString(\"not bad\") → \"not bad\"\tnotString(\"bad\") → \"not bad\"\tnotString(\"not\") → \"not\"\tnotString(\"is not\") → \"not is not\"notString(\"no\") → \"not no\"missingChar(\"kitten\", 1) → \"ktten\"\tmissingChar(\"kitten\", 0) → \"itten\"\tmissingChar(\"kitten\", 4) → \"kittn\"\tmissingChar(\"Hi\", 0) → \"i\"missingChar(\"Hi\", 1) → \"H\"\tmissingChar(\"code\", 0) → \"ode\"\tmissingChar(\"code\", 1) → \"cde\"\tmissingChar(\"code\", 2) → \"coe\"\tmissingChar(\"code\", 3) → \"cod\"\tmissingChar(\"chocolate\", 8) → \"chocolat\"frontBack(\"code\") → \"eodc\"\tfrontBack(\"a\") → \"a\"\tfrontBack(\"ab\") → \"ba\"\tfrontBack(\"abc\") → \"cba\"\tfrontBack(\"\") → \"\"\t\"\"\tfrontBack(\"Chocolate\") → \"ehocolatC\"\tfrontBack(\"aavJ\") → \"Java\"\tfrontBack(\"hello\") → \"oellh\"\t",
    "FunctionSig": "std::string frontBack(std::string str)",
    "Difficulty": "Easy"
  },
  {
    "ID": "5aab4d89-012c-4f92-9f3d-efa19fe6e809",
    "Title": "or35",
    "Question": "Given a string, we'll say that the front is the first 3 chars of the string.If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.Given a string, take the last char and return a new string with the last char added at the front and back,so \"cat\" yields \"tcatt\". The original string will be length 1 or more.Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % \"mod\" operator",
    "Examples": "front3(\"Java\") → \"JavJavJav\"\tfront3(\"Chocolate\") → \"ChoChoCho\"front3(\"abc\") → \"abcabcabc\"\tfront3(\"abcXYZ\") → \"abcabcabc\"front3(\"ab\") → \"ababab\"\tfront3(\"a\") → \"aaa\"\t\"aaa\"front3(\"\") → \"\"\t\"\"backAround(\"cat\") → \"tcatt\"\tbackAround(\"Hello\") → \"oHelloo\"\tbackAround(\"a\") → \"aaa\"\tbackAround(\"abc\") → \"cabcc\"backAround(\"read\") → \"dreadd\"backAround(\"boo\") → \"obooo\"or35(3) → true\tor35(10) → true\tor35(8) → false\tor35(15) → true\tor35(5) → true\tor35(9) → true\tor35(4) → false\tor35(7) → false\tor35(6) → true\tor35(17) → falseor35(18) → true\tor35(29) → falseor35(20) → true\tor35(21) → true\tor35(22) → false\tor35(45) → true\t\tor35(99) → true\t\tor35(100) → true\tor35(101) → falseor35(121) → falseor35(122) → falseor35(123) → true",
    "FunctionSig": "bool or35(int n)",
    "Difficulty": "Easy"
  },
  {
    "ID": "7342e7a5-7df0-4ade-9ce8-96d81f362a7b",
    "Title": "front22",
    "Question": "Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If the string length is less than 2, use whatever chars are there.",
    "Examples": "front22(\"kitten\") → \"kikittenki\"\tfront22(\"Ha\") → \"HaHaHa\"\tfront22(\"abc\") → \"ababcab\"\tfront22(\"ab\") → \"ababab\"\tfront22(\"a\") → \"aaa\"front22(\"\") → \"\"front22(\"Logic\") → \"LoLogicLo\"",
    "FunctionSig": "std::string front22(std::string str)",
    "Difficulty": "Easy"
  },
  {
    "ID": "4823750e-ab06-4927-9108-a54d9745745d",
    "Title": "startHi",
    "Question": "Given a string, return true if the string starts with \"hi\" and false otherwise.",
    "Examples": "startHi(\"hi there\") → true\t\tstartHi(\"hi\") → true\tstartHi(\"hello hi\") → false\tstartHi(\"he\") → false\tstartHi(\"h\") → false\tstartHi(\"\") → false\tstartHi(\"ho hi\") → falsestartHi(\"hi ho\") → true\t",
    "FunctionSig": "bool startHi(std::string str)",
    "Difficulty": "Easy"
  },
  {
    "ID": "8bf3f960-822a-4ff1-a9fe-38e2c4e5ce9d",
    "Title": "icyHot",
    "Question": "Given two temperatures, return true if one is less than 0 and the other is greater than 100.",
    "Examples": "icyHot(120, -1) → true\ticyHot(-1, 120) → true\ticyHot(2, 120) → false\ticyHot(-1, 100) → false\ticyHot(-2, -2) → false\ticyHot(120, 120) → false",
    "FunctionSig": "bool icyHot(int temp1, int temp2)",
    "Difficulty": "Easy"
  },
  {
    "ID": "ff3e90da-992d-4c07-a247-53ac1ec887e7",
    "Title": "in1020",
    "Question": "Given 2 int values, return true if either of them is in the range 10..20 inclusive.",
    "Examples": "in1020(12, 99) → true\tin1020(21, 12) → true\tin1020(8, 99) → false\tin1020(99, 10) → true\tin1020(20, 20) → true\tin1020(21, 21) → false\tin1020(9, 9) → false\t",
    "FunctionSig": "bool in1020(int a, int b)",
    "Difficulty": "Easy"
  }
]